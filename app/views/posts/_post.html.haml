.post_container{id: "post-#{post.id}"}
  -if current_user && current_user.admin
    =link_to post, method: :delete, title: 'Delete post' do
      %i.fas.fa-times.delete
  .title
    %h3
      =link_to post.title, post_path(post.id)
    =raw post.tag_list.map{ |t| link_to t, tag_path(t), class: 'badge badge-light badge-tags' }.join(" ")
  .body_container
    =post.body.html_safe
  .info
    .author.mb-2
      Autore:
      =link_to post.user.username, post.user 
      %small
        (
        =post.created_at.strftime("%d %m %Y")
        )
    .likes_comments
      -if current_user && current_user.likes.exists?(post_id: post.id)
        =link_to [post, post.likes.find_by(user: current_user)], method: :delete, class: 'like-button-container', remote: true do
          Like
          %i.fas.fa-thumbs-up
      -elsif !current_user
        =link_to new_user_session_path, class: 'like-button-container' do
          Like 
          %i.far.fa-thumbs-up
      -else
        =link_to [post, Like.new], method: :post, class: 'like-button-container', remote: true do
          Like
          %i.far.fa-thumbs-up 
      %small.ml-2.likes
        -if post.likes.any?
          %br
          =raw post.likes.last(2).map{ |l| link_to l.user.username, l.user}.join(', ')
          -if post.likes.count > 2
            and other #{post.likes.count - 2}
          %em
            liked this  
      %br
      =link_to post, class: 'comments-link' do
        =post.comments.count
        -if post.comments.count > 1
          Comments
        -else
          Comment
        %i.fas.fa-comment
  -if current_user
    .comments_list{id: "#{post.id}"}
  -else
    %strong
      Log in per vedere i commenti
  =form_for([post, Comment.new], remote: true) do |f|
    =f.text_field :body, class: 'form-control input', placeholder: 'Scrivi un commento...'
    -if current_user
      =f.submit "Invia", class: 'btn btn-outline-primary button'
    -else
      =link_to new_user_session_path do
        %btn.btn.btn-outline-primary.button
          Invia


